package Parse;

action code {: static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    :};

parser code  {: 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }
:};

scan with {: return lexer.nextToken(); :};

terminal String ID, STRING;
terminal Integer INT;
terminal COMMA, COLON, SEMICOLON, LPAREN, RPAREN, LBRACK, RBRACK, 
	LBRACE, RBRACE, DOT, PLUS, MINUS, TIMES, DIVIDE, EQ, NEQ, LT, LE, 
	GT, GE, AND, OR, ASSIGN, ARRAY, IF, THEN, ELSE, WHILE, FOR, TO,
	DO, LET, IN, END, OF, BREAK, NIL, FUNCTION, VAR, TYPE;

non terminal Absyn.Exp          Exp;
non terminal Absyn.Var          Var;
non terminal Absyn.FieldVar	fieldVar;
non terminal Absyn.SubscriptVar subscriptVar;
non terminal Absyn.ExpList      ExpList, Args, optArgs, seqExp, seqTail;
non terminal Absyn.DecList	decList;
non terminal Absyn.Dec 		Dec;
non terminal Absyn.TypeDec	typeDec, optTypes;
non terminal Absyn.FunctionDec	functionDec, optFunctions;
non terminal Absyn.Ty		Type;
non terminal Absyn.NameTy	nameType;
non terminal Absyn.FieldList	Fields, optFields;
non terminal Absyn.FieldExpList fieldExps, optFieldExps;
non terminal empty;

precedence nonassoc THEN;
precedence nonassoc ELSE;
precedence nonassoc ASSIGN;
precedence left     OR;
precedence left     AND;
precedence nonassoc EQ, NEQ, LT, LE, GT, GE;
precedence left     PLUS, MINUS;
precedence left     TIMES, DIVIDE;

start with Exp;

Exp ::= error:e
	  {: RESULT = new Absyn.SeqExp(eleft, null); :}
	| Var:v
	  {: RESULT = new Absyn.VarExp(vleft, v); :}
	| STRING:s
  	  {: RESULT = new Absyn.StringExp(sleft, s); :}
   	| Exp:e1 AND:op Exp:e2
  	  {:RESULT = new Absyn.IfExp(opleft,e1,e2,new Absyn.IntExp(opleft,0)); :} 
  	| Exp:e1 OR:op Exp:e2
  	  {:RESULT = new Absyn.IfExp(opleft,e1,new Absyn.IntExp(opleft,1),e2); :}
  	| Exp:e1 PLUS:op Exp:e2
  	  {:RESULT = new Absyn.OpExp(opleft,e1,0,e2); :} 
  	| Exp:e1 MINUS:op Exp:e2
  	  {:RESULT = new Absyn.OpExp(opleft,e1,1,e2); :} 
    	| Exp:e1 TIMES:op Exp:e2
   	  {:RESULT = new Absyn.OpExp(opleft,e1,2,e2); :} 
    	| Exp:e1 DIVIDE:op Exp:e2
   	  {:RESULT = new Absyn.OpExp(opleft,e1,3,e2); :} 
   	| Exp:e1 EQ:op Exp:e2
   	  {:RESULT = new Absyn.OpExp(opleft,e1,4,e2); :} 
   	| Exp:e1 NEQ:op Exp:e2
   	  {:RESULT = new Absyn.OpExp(opleft,e1,5,e2); :} 
    	| Exp:e1 LT:op Exp:e2
    	  {:RESULT = new Absyn.OpExp(opleft,e1,6,e2); :} 
    	| Exp:e1 LE:op Exp:e2
    	  {:RESULT = new Absyn.OpExp(opleft,e1,7,e2); :} 
   	| Exp:e1 GT:op Exp:e2
   	  {:RESULT = new Absyn.OpExp(opleft,e1,8,e2); :} 
   	| Exp:e1 GE:op Exp:e2
   	  {:RESULT = new Absyn.OpExp(opleft,e1,9,e2); :} 
   	| MINUS:op Exp:e
   	  {:RESULT = new Absyn.OpExp(opleft,new Absyn.IntExp(opleft,0),1,e); :}
	| LET decList:d IN:in ExpList:e END
	  {: RESULT = new Absyn.LetExp(inleft, d, new Absyn.SeqExp(exListleft, e)); :}
	| LPAREN:lp ExpList:list RPAREN
	  {: RESULT = new Absyn.SeqExp(lpleft, list); :}
	| IF Exp:e1 THEN:the Exp:e2 
  	  {: RESULT = new Absyn.IfExp(theleft, e1, e2); :}
	| IF: i Exp:e1 THEN Exp:e2 ELSE Exp:e3
	  {: RESULT = new Absyn.IfExp(ileft, e1, e2, e3); :}
	| ID:n LBRACE:lb fieldExps:f RBRACE
	  {: RESULT = new Absyn.RecordExp(lbleft, sym(n), f); :}
	| WHILE:w Exp:e1 DO Exp:e2
	  {: RESULT = new Absyn.WhileExp(wleft, e1, e2); :}
	| ID:n LBRACK:lb Exp:e1 RBRACK OF Exp:e2
          {: RESULT = new Absyn.ArrayExp(lbleft, sym(n), e1, e2); :}
	| Var:v ASSIGN:a Exp:e
	  {: RESULT = new Absyn.AssignExp(aleft, v, e); :}
	| ID:n LPAREN:lp Args:args RPAREN
	  {: RESULT = new Absyn.CallExp(lpleft, sym(n), args); :}
	| FOR:f ID:n ASSIGN:a Exp:e1 TO Exp:e2 DO Exp:e3
	  {: RESULT = new Absyn.ForExp(fleft, new Absyn.VarDec(aleft, sym(n), null, e1), e2, e3); :}
  	| INT:i
  	  {: RESULT = new Absyn.IntExp(ileft, i); :}
  	| NIL:n
  	  {: RESULT = new Absyn.NilExp(nleft); :}
  	| BREAK:b
  	  {: RESULT = new Absyn.BreakExp(bleft); :}
	;

Var ::=   ID:n
	  {: RESULT = new Absyn.SimpleVar(nleft, sym(n)); :}
	| fieldVar:fv
	  {: RESULT = fv; :}
	| subscriptVar:sub
	  {: RESULT = sub; :}
	;
	
ExpList ::= 
	  {: RESULT = null; :}
	| Exp: e 
          {: RESULT = new Absyn.ExpList(e, null); :}
	| seqExp:s
	  {: RESULT = s; :}
	;
	
fieldVar ::=
	Var:v DOT:d ID:n
	  {: RESULT = new Absyn.FieldVar(dleft,v,sym(n)); :}
	;

subscriptVar ::= 
	ID:n LBRACK:lb Exp:e RBRACK
          {: RESULT = new Absyn.SubscriptVar(lbleft, new Absyn.SimpleVar(nleft,sym(n)),e); :}
	| fieldVar:fv LBRACK:lb Exp:e RBRACK
	  {: RESULT = new Absyn.SubscriptVar(lbleft,fv,e); :}
	| subscriptVar:sv LBRACK:lb Exp:e RBRACK
	  {: RESULT = new Absyn.SubscriptVar(lbleft,sv,e); :}
	;

decList ::=
	Dec:d
	  {: RESULT = new Absyn.DecList(d,null); :}
	| Dec:d decList:dl
	  {: RESULT = new Absyn.DecList(d,dl); :}
	;
	
Dec ::=
	error
	| functionDec:f
	  {: RESULT = f; :}
	| VAR:v ID:n nameType:nt ASSIGN Exp:e
	  {: RESULT = new Absyn.VarDec(vleft,sym(n),nt,e); :}
	| typeDec:t
	  {: RESULT = t; :}
	;
	
Args ::=
	| Exp:e optArguments:args
	  {: RESULT = new Absyn.ExpList(e, args); :}
	;

optArguments ::=
	error
	|
	  {: RESULT = null; :}
	| COMMA Exp:e optArguments:args
	  {: RESULT = new Absyn.ExpList(e, args); :}
	;
	
fieldExps ::=
	error
	|
	| ID:n EQ:eq Exp:e optFieldExps: of
	  {: RESULT = new Absyn.FieldExpList(eqleft, sym(n), e, of); :}
	;	

optFieldExps ::=
	error
	|
	| COMMA:c ID:n Exp:e optFieldExps: of
	  {: RESULT = new Absyn.FieldExpList(cleft, sym(n), e, of); :}
	;

seqExp ::=
        Exp:e SEMICOLON seqTail:s
           {: RESULT = new Absyn.ExpList(e,s); :}
        ;

seqTail ::=
        Exp:e
          {: RESULT = new Absyn.ExpList(e,null); :}
        | seqExp: s
          {: RESULT = s; :}
        ;

functionDec ::=
	FUNCTION:fun ID:n LPAREN Fields:f RPAREN nameType:Nt EQ Exp:e optFunctions:of
	  {: RESULT = new Absyn.FunctionDec(funleft,sym(n),f,Nt,e,of); :}
	;

optFunctions ::=
	| functionDec: fd
	  {: RESULT = fd; :}
	;
	
typeDec ::=
	TYPE:t1 ID:n EQ:eq type:t2 optTypes:t3
	  {: RESULT = new Absyn.TypeDec(t1left,sym(n), t2, t3); :}
	;

optTypes ::=
	| typeDec: td
	  {: RESULT = td; :}
	;

Fields ::=
	error
	|
	| ID:n1 COLON:c ID:n2 optFields:of
	  {: RESULT = new Absyn.FieldList(cleft, sym(n1), sym(n2), of); :}
	;

nameType ::=
	error
	|
	| COLON:c ID:n
	  {: RESULT = new Absyn.NameTy(cleft, sym(n)); :}
	;
	
Type ::=
	ID:n
	{: RESULT = new Absyn.NameTy(nleft, sym(n)); :}
	| LBRACE:lb fields:f RBRACE
	{: RESULT = new Absyn.RecordTy(lbleft, f); :}
	| ARRAY:a OF ID:n
	{: RESULT = new Absyn.ArrayTy(aleft, sym(n)); :}
	;

empty ::=
	;
